<?php
defined('BASEPATH') OR exit('No direct script access allowed');

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */

/**
 * @property  ion_auth $ion_auth
 * @property  customer_model $customer_model
 * @property  hobbies_model $hobbies_model
 */

class Example extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();
        $this->load->model('customer_model');
        $this->load->model('hobbies_model');

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['user_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['user_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['user_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    public function users_get()
    {

        // Users from a data store e.g. database
        $users = $this->customer_model->get_all();
        $id = $this->get('id');

        // If the id parameter doesn't exist return all the users

        if ($id === NULL)
        {
            // Check if the users data store contains users (in case the database result returns NULL)
            if ($users)
            {
                $data = array();
                foreach ($users as $a):
                    $data[] = array(
                        'id' => $a->id,
                        'name' => $a->name,
                        'email' => $a->email,
                        'fact' => $a->fact,
                        'hobbies' => (array) $this->hobbies_model->getDataHobbies($a->id)
                    );

                endforeach;
                // Set the response and exit
                $this->response($data, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'error' => 'No users were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

        // Find and return a single record for a particular user.

        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Get the user from the array, using the id as key for retreival.
        // Usually a model is to be used for this.

        $user = NULL;
        $users = $this->customer_model->get($id);

        if (!empty($users))
        {
            $data = array();
                $data = array(
                    'id' => $users->id,
                    'name' => $users->name,
                    'email' => $users->email,
                    'fact' => $users->fact,
                    'hobbies' => (array) $this->hobbies_model->getDataHobbies($users->id)
                );

        }

        if (!empty($users))
        {
            $this->set_response($data, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                'status' => FALSE,
                'error' => 'User could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function users_post()
    {
        $insert = $this->customer_model->insert(array('name' => $this->post('name'),'email' => $this->post('email'),'fact' => $this->post('fact')));

        $insert_id = $this->db->insert_id();


        foreach ($this->post('hobbies') as $ax) :
            $this->hobbies_model->where(array('hobbies'=>$ax['hobbies'],'customer_id'=>$insert_id))->get();
            $this->hobbies_model->insert(array('hobbies' => $ax['hobbies'],'customer_id' => $insert_id));
        endforeach;

        $message = [
            'id' => $insert_id, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function users_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        $dtDetail = $this->hobbies_model->getDataHobbies($id);
        foreach ($dtDetail as $a):
            $this->hobbies_model->delete($a['id']);
        endforeach;

        $this->customer_model->delete($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_OK); // NO_CONTENT (204) being the HTTP response code
    }

    public function users_put()
    {

        $id = $this->get('id');
        $newdata = array('name' => $this->put('name'),'email' => $this->put('email'),'fact' => $this->put('fact'));
        $this->customer_model->update($newdata,array('id'=>$id));

        foreach ($this->put('hobbies') as $ax) :
           if(!empty($ax['id'])){
               $newdataDt = array('hobbies' => $ax['hobbies']);
               $this->hobbies_model->update($newdataDt,array('id'=>$ax['id']));
           }else{
               $this->hobbies_model->insert(array('hobbies' => $ax['hobbies'],'customer_id' => $id));
           }
        endforeach;

        $message = [
            'id' => $id, // Automatically generated by the model
            'name' => $this->put('name'),
            'email' => $this->put('email'),
            'message' => 'Update a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_OK);
    }

}
